knitr::opts_chunk$set(echo = TRUE)
# Read the data
cet <- read.csv('cet_temp.csv')
# Convert it into a timeseries with
# start = 1900
# frequency = 1 (yearly data)
cet_temp <- ts(cet$avg_annual_temp_C, start = 1900, frequency = 1)
# Plot the timeseries
ts.plot(cet_temp, gpars = list(main = "Time Series Plot for Average Annual Temperature", xlab = "Year", ylab = "Average annual temperature"))
# Plot ACF vs Lag
acf(cet_temp, lag.max = 50, main = "Sample ACF vs Lag for Average Annual Temperature")
# Plot PACF vs Lag
pacf(cet_temp, lag.max = 50,main = "Sample PACF vs Lag for Average Annual Temperature")
knitr::opts_chunk$set(echo = TRUE)
# Read the data
cet <- read.csv('cet_temp.csv')
# Convert it into a timeseries with
# start = 1900
# frequency = 1 (yearly data)
cet_temp <- ts(cet$avg_annual_temp_C, start = 1900, frequency = 1)
# Plot the timeseries
ts.plot(cet_temp, gpars = list(main = "Time Series Plot for Average Annual Temperature", xlab = "Year", ylab = "Average annual temperature"))
# Plot ACF vs Lag
acf(cet_temp, lag.max = 50, main = "Sample ACF vs Lag for Average Annual Temperature")
# Plot PACF vs Lag
pacf(cet_temp, lag.max = 50,main = "Sample PACF vs Lag for Average Annual Temperature")
# Take first difference of the timeseries ( Wt = (1-B)Xt )
temp_diff <- diff(cet_temp)
# Plot the timeseries
ts.plot(temp_diff, gpars = list(main = "Time Series Plot for 1st differenced temperature data", xlab = "Year", ylab = "1st Difference of Avg annual temp"))
# Plot the ACF vs Lag
acf(temp_diff, lag.max = 50,main = "Sample ACF vs Lag for 1st differenced data")
# Plot the PACF vs Lag
pacf(temp_diff, lag.max = 50,main = "Sample PACF vs Lag for 1st differenced data")
#Code to fit MA(1) model to the first difference of the average annual temperature
#p = 0 Order of the AR part of the model
#d = 1 Order of differencing (First differenced data)
#q = 1 Order of the MA part of the model
model.MA1<-arima(cet_temp, order=c(0,1,1), method="ML")
model.MA1
# Extract the residuals of the model
resid.MA1<-residuals(model.MA1)
# Plot the residuals
ts.plot(resid.MA1, gpars = list(main = "Time Series Plot for residuals of ARIMA(0,1,1) model", xlab = "Year", ylab = "ARIMA(0,1,1) Residuals"))
# Plot ACF for the residuals
acf(resid.MA1, lag.max = 50, main = "ACF vs Lag for ARIMA(0,1,1) model Residuals")
# Plot PACF for the residuals
pacf(resid.MA1, lag.max = 50, main = "PACF vs Lag for ARIMA(0,1,1) model Residuals")
#Function to produce P-values for the Ljung-Box test for different lags
#where an ARMA(p,q) model has been fitted.
#Note that k must be > p+q
#Number of degrees of freedom for the test = k-p-q
#Arguments for the function "LB_test"
#resid = residuals from a fitted ARMA(p,q) model.
#max.k = the maximum value of k at which we perform the test
#Note that the minimum k is set at p+q+1 (corresponding to a test with one degree
#of freedom)
#p = Order of the AR part of the model
#q = Order of the MA part of the model
#The function returns a table with one column showing the number of degrees
#of freedom for the test and the other the associated P-value.
LB_test<-function(resid,max.k,p,q){
lb_result<-list()
df<-list()
p_value<-list()
for(i in (p+q+1):max.k){
lb_result[[i]]<-Box.test(resid,lag=i,type=c("Ljung-Box"),fitdf=(p+q))
df[[i]]<-lb_result[[i]]$parameter
p_value[[i]]<-lb_result[[i]]$p.value
}
df<-as.vector(unlist(df))
p_value<-as.vector(unlist(p_value))
test_output<-data.frame(df,p_value)
names(test_output)<-c("deg_freedom","LB_p_value")
return(test_output)
}
#Since p+q=1, we run the following command to perform the first ten
#Ljung-Box tests for the model residuals (max.k=11)
MA1.LB<-LB_test(resid.MA1,max.k=11,p=0,q=1)
#To see the table of P-values
MA1.LB
#To produce a plot of the P-values against the degrees of freedom and
#add a blue dashed line at 0.05, we run the commands
plot(MA1.LB$deg_freedom,MA1.LB$LB_p_value,xlab="Degrees of freedom",ylab="Pvalue",main="Ljung-Box test P-values",ylim=c(0,1))
abline(h=0.05,col="blue",lty=2)
#Code to fit MA(2) model to the first difference of the average annual temperature
#p = 0 Order of the AR part of the model
#d = 1 Order of differencing (First differenced data)
#q = 2 Order of the MA part of the model
model.MA2<-arima(cet_temp, order=c(0,1,2), method="ML")
model.MA2
#Code to fit ARIMA(1, 1, 1) model to the average annual temperature
#p = 1 Order of the AR part of the model
#d = 1 Order of differencing (First differenced data)
#q = 1 Order of the MA part of the model
model.ARMA11<-arima(cet_temp, order=c(1,1,1), method="ML")
model.ARMA11
# Read the data
prices <- read.csv('em_house_prices.csv')
#Convert it into timeseries with
# start = 2010
# frequency = 12 (monthly data)
prices <- ts(prices$average_price_gbp, start = 2010, frequency = 12)
# Plot the timeseries for average house prices
ts.plot(prices, gpars = list(main = "Time Series Plot for Average House Prices", xlab = "Year", ylab = "Average House Price"))
# Plot ACF vs Lag
acf(prices, lag.max = 60, main = "Sample ACF vs Lag for Average House Prices")
#Plot PACF vs Lag
pacf(prices, lag.max = 60, main = "Sample PACF vs Lag for Average House Prices")
# Take first difference of the timeseries ( Wt = (1-B)Xt )
prices_diff <- diff(prices)
# Plot the timeseries for 1st differenced data
ts.plot(prices_diff, gpars = list(main = "Time Series Plot for 1st differenced Prices", xlab = "Year", ylab = "1st Differenced Average House Price"))
# Plot ACF vs Lag for 1st differenced data
acf(prices_diff, lag.max = 60, main = "ACF vs Lag for 1st Differenced Prices")
# Plot PACF vs Lag for 1st differenced data
pacf(prices_diff, lag.max = 60, main = "PACF vs Lag for 1st Differenced Prices")
# Take seasonal difference for lag = 12 (Yt = Wt - Wt-12)
prices_diff2 <- diff(prices_diff, lag = 12)
# Plot the timeseries for the differenced data
ts.plot(prices_diff2, gpars = list(main = "Time Series Plot for the differenced data", xlab = "Year", ylab = "Differenced Average House Prices"))
# Plot ACF vs Lag for the differenced data
acf(prices_diff2, lag.max =60, main = "ACF vs Lag for Differenced House Prices")
# Plot PACF vs Lag for the differenced data
pacf(prices_diff2, lag.max = 60, main = "PACF vs Lag for Differenced House Prices")
#Code to fit ARIMA (0, 1, 1) × (0, 1, 1)12 model to the Average House Prices data
#p = 0 Order of the AR component of the non-seasonal part
#d = 1 Order of differencing for the non-seasonal part
#q = 1 Order of the MA component of the non-seasonal part
#P = 0 Order of the AR component of the seasonal part
#D = 1 Order of differencing for the seasonal part
#Q = 1 Order of the MA component of the seasonal part
model.SARMA0101<-arima(prices,order=c(0,1,1), seasonal = list(order = c(0,1,1), period = 12), method="ML")
model.SARMA0101
# Extract the residuals of the model
resid.SARMA0101<-residuals(model.SARMA0101)
# Plot the residuals
ts.plot(resid.SARMA0101, gpars = list(main = "Plot for residuals of ARIMA(0,1,1)×(0,1,1)12 model", xlab = "Year", ylab = "ARIMA(0,1,1)×(0,1,1)12 Residuals"))
# Plot ACF for the residuals
acf(resid.SARMA0101, lag.max = 50, main = "ACF vs Lag for ARIMA(0,1,1)×(0,1,1)12 Residuals")
# Plot PACF for the residuals
pacf(resid.SARMA0101, lag.max = 50, main = "PACF vs Lag for ARIMA(0,1,1)×(0,1,1)12 Residuals")
#Code to fit ARIMA (4, 1, 1) × (0, 1, 1)12 model to the average house prices data
#p = 4 Order of the AR component of the non-seasonal part
#d = 1 Order of differencing for the non-seasonal part
#q = 1 Order of the MA component of the non-seasonal part
#P = 0 Order of the AR component of the seasonal part
#D = 1 Order of differencing for the seasonal part
#Q = 1 Order of the MA component of the seasonal part
model.SARMA4101<-arima(prices,order=c(4,1,1), seasonal = list(order = c(0,1,1), period = 12), method="ML")
model.SARMA4101
#Code to fit ARIMA (3, 1, 1) × (0, 1, 1)12 model to the average house prices data
#p = 3 Order of the AR component of the non-seasonal part
#d = 1 Order of differencing for the non-seasonal part
#q = 1 Order of the MA component of the non-seasonal part
#P = 0 Order of the AR component of the seasonal part
#D = 1 Order of differencing for the seasonal part
#Q = 1 Order of the MA component of the seasonal part
model.SARMA3101<-arima(prices,order=c(3,1,1), seasonal = list(order = c(0,1,1), period = 12), method="ML")
model.SARMA3101
#Code to fit ARIMA (2, 1, 1) × (0, 1, 1)12 model to the average house prices data
#p = 2 Order of the AR component of the non-seasonal part
#d = 1 Order of differencing for the non-seasonal part
#q = 1 Order of the MA component of the non-seasonal part
#P = 0 Order of the AR component of the seasonal part
#D = 1 Order of differencing for the seasonal part
#Q = 1 Order of the MA component of the seasonal part
model.SARMA2101<-arima(prices,order=c(2,1,1), seasonal = list(order = c(0,1,1), period = 12), method="ML")
model.SARMA2101
# Extract the residuals of the model
resid.SARMA2101<-residuals(model.SARMA2101)
# Plot the residuals
ts.plot(resid.SARMA2101, gpars = list(main = "Plot for residuals of ARIMA(2,1,1)×(0,1,1)12 model", xlab = "Year", ylab = "ARIMA(2,1,1)×(0,1,1)12 Residuals"))
# Plot ACF for the residuals
acf(resid.SARMA2101, lag.max = 50, main = "ACF vs Lag for ARIMA(2,1,1)×(0,1,1)12 Residuals")
# Plot PACF for the residuals
pacf(resid.SARMA2101, lag.max = 50, main = "PACF vs Lag for ARIMA(2,1,1)×(0,1,1)12 Residuals")
#Function to produce P-values for the Ljung-Box test for different lags
#where an ARIMA(p,d,q)x(P,D,Q)_h model has been fitted.
#Note that k must be > p+q+P+Q
#Number of degrees of freedom for the test = k-p-q-P-Q
#Arguments for the function "LB_test"
#resid = residuals from a fitted ARIMA(p,d,q)x(P,D,Q)_h model
#max.k = the maximum value of k at which we perform the test
#Note that the minimum k is set at p+q+P+Q+1 (corresponding to a test with one degree
#of freedom)
#p = Order of the non-seasonal AR part of the model
#q = Order of the non-seasonal MA part of the model
#P = Order of the seasonal AR part of the model
#Q = Order of the seasonal MA part of the model
#The function returns a table with one column showing the number of degrees
#of freedom for the test and the other the associated P-value.
LB_test_SARIMA<-function(resid,max.k,p,q,P,Q){
lb_result<-list()
df<-list()
p_value<-list()
for(i in (p+q+P+Q+1):max.k){
lb_result[[i]]<-Box.test(resid,lag=i,type=c("Ljung-Box"),fitdf=(p+q+P+Q))
df[[i]]<-lb_result[[i]]$parameter
p_value[[i]]<-lb_result[[i]]$p.value
}
df<-as.vector(unlist(df))
p_value<-as.vector(unlist(p_value))
test_output<-data.frame(df,p_value)
names(test_output)<-c("deg_freedom","LB_p_value")
return(test_output)
}
#Ljung-Box tests for the model residuals (max.k=14)
MA1.LB<-LB_test_SARIMA(resid.SARMA2101,max.k=14,p=2,q=1, P=0, Q=1)
#To see the table of P-values, type
MA1.LB
#To produce a plot of the P-values against the degrees of freedom and
#add a blue dashed line at 0.05, we run the commands
plot(MA1.LB$deg_freedom,MA1.LB$LB_p_value,xlab="Degrees of freedom",ylab="Pvalue",main="Ljung-Box test P-values",ylim=c(0,1))
abline(h=0.05,col="blue",lty=2)
# ARIMA (2, 1, 2) × (0, 1, 1)12
model.SARMA2201<-arima(prices,order=c(2,1,2), seasonal = list(order = c(0,1,1), period = 12), method="ML")
model.SARMA2201
# ARIMA (1, 1, 2) × (0, 1, 1)12
model.SARMA1201<-arima(prices,order=c(1,1,2), seasonal = list(order = c(0,1,1), period = 12), method="ML")
model.SARMA1201
# ARIMA (2, 1, 1) × (1, 1, 1)12
model.SARMA2111<-arima(prices,order=c(2,1,1), seasonal = list(order = c(1,1,1), period = 12), method="ML")
model.SARMA2111
# ARIMA (2, 1, 1) × (0, 1, 2)12
model.SARMA2102<-arima(prices,order=c(2,1,1), seasonal = list(order = c(0,1,2), period = 12), method="ML")
model.SARMA2102
# Extract the residuals of the model
resid.SARMA1201<-residuals(model.SARMA1201)
# Plot the residuals
ts.plot(resid.SARMA1201, gpars = list(main = "Plot for residuals of ARIMA(1,1,2)×(0,1,1)12 model", xlab = "Year", ylab = "ARIMA(1,1,2)×(0,1,1)12 Residuals"))
# Plot ACF for the residuals
acf(resid.SARMA1201, lag.max = 50, main = "ACF vs Lag for ARIMA(1,1,2)×(0,1,1)12 Residuals")
# Plot PACF for the residuals
pacf(resid.SARMA1201, lag.max = 50, main = "PACF vs Lag for ARIMA(1,1,2)×(0,1,1)12 Residuals")
#Ljung-Box tests for the model residuals (max.k=14)
MA1.LB<-LB_test_SARIMA(resid.SARMA1201,max.k=14,p=1,q=2, P=0, Q=1)
#To see the table of P-values, type
MA1.LB
#To produce a plot of the P-values against the degrees of freedom and
#add a blue dashed line at 0.05, we run the commands
plot(MA1.LB$deg_freedom,MA1.LB$LB_p_value,xlab="Degrees of freedom",ylab="Pvalue",main="Ljung-Box test P-values",ylim=c(0,1))
abline(h=0.05,col="blue",lty=2)
#install.packages("forecast")
library(forecast)
# Forecast the values for next 6 months
forecast_values <- forecast(model.SARMA1201, h = 6)
# Plot the forecasted values
plot(forecast_values)
# Print the forecasted values
print(forecast_values)
